tosca_definitions_version: tosca_simple_yaml_1_0

imports:
#  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/master/custom_types.yaml
  - indigo_custom_types: https://raw.githubusercontent.com/alexcos78/tosca-types/master/custom_types.yaml

description: Run a docker container

metadata:
  display_name: Run docker with persistent volume

topology_template:

  inputs:

    num_cpus:
      type: integer
      description: Number of virtual cpus for the VM
      default: 1

    mem_size:
      type: scalar-unit.size
      description: Amount of memory for the VM
      default: 2 GB
      
    volume_path:
      type: string
      default: /data
      description: Path to the mountpint in the VM
      
    volume_size:
      type: scalar-unit.size
      description: Size of the volume to be attached
      default: 10 GB
      
    docker_appname:
      type: string
      description: Name to be assigned to the container
      default: "nginx"

    docker_image:
      type: string
      description: Name of the image used to create the container
      default: "nginx"

    docker_tag:
      type: string 
      description: Tag of the image used to create the container
      default: "latest"

    ports_mapping:
      type: list
      description: "List of ports to publish from the container to the host. Use docker CLI syntax: 8000, or 9000:8000, where 8000 is a container port, 9000 is a host port"
      entry_schema:
        type: string        
      default: [ "8080:80" ]

    docker_command:
      type: string
      description: Command to execute when the container starts
      default: ""

    docker_volume:
      type: string 
      description: Path for the voume into the container
      default: "/data"

    service_ports:
      type: map
      required: false
      default: { "ssh": { "protocol": "tcp", "source": 22 } }
      constraints:
        - min_length: 0
      entry_schema:
        type: tosca.datatypes.network.PortSpec
      description: Ports to open on the VM to access the service(s)

#    users:
#      type: list
#      description: list of users to create on the VM
#      entry_schema:
#        type: tosca.datatypes.indigo.User
#      default: []
#      required: false      

    environment_variables:
      required: no
      default: []
      type: list
      entry_schema:
        type: map
        entry_schema:
          type: string
      description: Environment variables (key,value pairs)
      
  node_templates:

    pub_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: public

    server_pub_port:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: server
        - link: pub_network

    priv_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: private

    server_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: server
        - link: priv_network

    block_device:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: volume_size }

    server:
      type: tosca.nodes.indigo.Compute
#      properties:
#        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            ports: { get_input: service_ports }
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
        os:
          properties:
            distribution: ubuntu
            version: 20.04
            type: linux
      requirements:
        - local_storage:
            node: block_device
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: host_volume }
                device: vdb

 
    docker:
      type: tosca.nodes.indigo.dockerRun
      properties:
        docker_appname: { get_input: docker_appname }
        docker_image: { get_input: docker_image }
        docker_tag: { get_input: docker_tag }
        docker_ports: { get_input: ports_mapping }
        docker_command: { get_input: docker_command }
        docker_volume: { get_input: docker_volume}
        volume_path: { get_input: volume_path}
        environment_variables: { get_input: environment_variables }
      requirements:
        - host: server

 
  outputs:
    node_ip:
      value: { get_attribute: [ server, public_address, 0 ] }
    node_creds:
      value: { get_attribute: [ server, endpoint, credential, 0 ] }
#    os_users:
#      value: { get_property: [ server, os_users, 0 ] }
