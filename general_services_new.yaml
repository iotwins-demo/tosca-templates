tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types:
      https://raw.githubusercontent.com/indigo-dc/tosca-types/master/custom_types.yaml

description: Run general data-processing services for digital twins.

metadata:
  display_name: General Services
  icon: https://indigo-paas.cloud.ba.infn.it/public/images/IoTwins_Logo.png

topology_template:
  inputs:

    function_selector:
      type: integer
      description:
      required: yes

    cpus:
      type: float
      default: 1
      description: Amount of CPUs for this job
      required: yes

    mem:
      type: string
      description: Amount of Memory for this job
      required: yes
      constraints:
        - valid_values: ['256 MB', '512 MB', '1024 MB', '2048 MB', '4096 MB']

    input_filename:
      type: string
      description: Name of the file containing the data
      required: yes

    minio_usr:
      type: string
      description: MinIO Username
      required: yes
#      default: ''

    minio_endpoint:
      type: string
      description: MinIO endpoint
      required: yes
#      default: ''

    minio_bucket:
      type: string
      description: MinIO bucket
      required: yes
#      default: ''

    iam_client_id:
      type: string
      description: IAM Client Identifier
      required: yes

    iam_server:
      type: string
      description: IAM Server 
      required: yes

    iam_client_secret:
      type: string
      description: IAM Client Secret
      required: yes

    refresh_token: 
      type: string
      description: oidc-agent refresh token
      required: yes

  node_templates:

    preprocessing_job:
      type: tosca.nodes.indigo.Container.Application.Docker.Chronos
      properties:
        command: 'chmod u+x /run.sh && /run.sh'
        retries: 2
        environment_variables:
          APPLICATION: 'general_services'
          INPUT_FILENAME: { get_input: input_filename }
          FUNCTION: { get_input: function_selector }
          REFRESH_TOKEN: { get_input: refresh_token }
          IAM_SERVER: { get_input: iam_server }
          IAM_CLIENT_SECRET: { get_input: iam_client_secret }
          IAM_CLIENT_ID: { get_input: iam_client_id }
          USER: { get_input: minio_usr }
          BUCKET: { get_input: minio_bucket }
          ENDPOINT: { get_input: minio_endpoint }

      artifacts:
        image:
          file: 'aborghesi/iotwins_wp3_demo:1.0.0'
          type: tosca.artifacts.Deployment.Image.Container.Docker
      requirements:
        - host: docker_runtime

    docker_runtime:
      type: tosca.nodes.indigo.Container.Runtime.Docker
      capabilities:
        host:
          properties:
            num_cpus: { get_input: cpus }
            mem_size: { get_input: mem }
